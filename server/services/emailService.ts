import type { Summary, User } from "@shared/schema";
import nodemailer from "nodemailer";
import { generateDOCX, generatePDF } from "./exportService";

// Validate environment variables
const requiredEnvVars = [
  "MAILTRAP_HOST",
  "MAILTRAP_PORT",
  "MAILTRAP_USER",
  "MAILTRAP_PASS",
];
for (const envVar of requiredEnvVars) {
  if (!process.env[envVar]) {
    throw new Error(`${envVar} environment variable must be set`);
  }
}

// Create reusable transporter
const transporter = nodemailer.createTransport({
  
  host: process.env.MAILTRAP_HOST,
  port: parseInt(process.env.MAILTRAP_PORT!, 10),
  auth: {
    user: process.env.MAILTRAP_USER,
    pass: process.env.MAILTRAP_PASS,
  },
});

export async function sendSummaryEmail(
  summary: Summary,
  recipients: string[],
  subject: string,
  format: "html" | "pdf" | "both",
  sender: User,
  ccSelf?: boolean
): Promise<void> {
  try {
    const attachments: any[] = [];

    // Generate attachments based on format
    if (format === "pdf" || format === "both") {
      const pdfBuffer = await generatePDF(summary);
      attachments.push({
        filename: `${summary.title}.pdf`,
        content: pdfBuffer,
        contentType: "application/pdf",
      });
    }

    if (format === "both") {
      const docxBuffer = await generateDOCX(summary);
      attachments.push({
        filename: `${summary.title}.docx`,
        content: docxBuffer,
        contentType:
          "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
      });
    }

    // Prepare email content
    const htmlContent =
      format === "html" || format === "both"
        ? `
        <html>
          <body style="font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px;">
            <h1 style="color: #2563eb; border-bottom: 2px solid #e5e7eb; padding-bottom: 10px;">
              ${summary.title}
            </h1>
            <div style="background-color: #f9fafb; padding: 15px; border-radius: 8px; margin: 20px 0;">
              <strong>Generated by:</strong> ${sender.fullName} (${
            sender.email
          })<br>
              <strong>Date:</strong> ${new Date(
                summary.createdAt!
              ).toLocaleDateString()}<br>
              <strong>Word Count:</strong> ${summary.wordCount} words
            </div>
            <div style="line-height: 1.6; white-space: pre-wrap;">
              ${summary.summaryContent.replace(/\n/g, "<br>")}
            </div>
            <hr style="margin: 30px 0; border: none; border-top: 1px solid #e5e7eb;">
            <p style="color: #6b7280; font-size: 14px;">
              This summary was generated using SummaryFlow - AI Meeting Transcript Summarization
            </p>
          </body>
        </html>
      `
        : undefined;

    const textContent = `
${summary.title}

Generated by: ${sender.fullName} (${sender.email})
Date: ${new Date(summary.createdAt!).toLocaleDateString()}
Word Count: ${summary.wordCount} words

${summary.summaryContent}

---
This summary was generated using SummaryFlow - AI Meeting Transcript Summarization
    `;

    const mailOptions = {
      from: {
        name: sender.fullName,
        address: sender.email,
      },
      to: recipients,
      cc: ccSelf ? [sender.email] : undefined,
      subject: subject,
      text: textContent,
      html: htmlContent,
      attachments: attachments,
    };

    // Send email
    await transporter.sendMail(mailOptions);
  } catch (error: any) {
    throw new Error(`Email sending failed: ${error.message}`);
  }
}

// Add this to emailService.ts
export async function verifyEmailConnection(): Promise<void> {
  try {
    await transporter.verify();
    console.log("Email service is ready");
  } catch (error: any) {
    throw new Error(`Email service verification failed: ${error.message}`);
  }
}
